/**
 * account-management-api
 * ## TMF API Reference: TMF666 - Account Management:   The Account API provides standardized mechanism for the management of billing and settlement accounts, as well as for financial accounting (account receivable) either in B2B or B2B2C contexts.  It allows creation, update and retrieval of account information either in a B2B2C relationship context (creation of mass market customer billing account within a “Billing on Behalf of” process for example) or in a B2B context (creation of a billing/settlement account for a partner or B2B customer).  It also allows creation and query of bill items allowing partners or B2B customer to check their invoice.  Accounts typically refer to parties and party roles. However the management of party and party roles is out of the scope of this API. The TMF APIs Party Management, Customer Management and Party Role Management can be used for this purpose.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
* The return value for the standard GET service-health operation. 
*/
export class ServiceHealth {
    /**
    * The name of the Mulesoft application, or an appropriate value for the external system such as a connection string
    */
    'serviceName': string;
    /**
    * When the health check started
    */
    'checkDate': Date;
    /**
    * Is the service up and responding as expected?
    */
    'isUp': boolean;
    /**
    * The version number of the Mulesoft application. This is generally not known for external systems.
    */
    'serviceVersion'?: string;
    /**
    * The build date of the Mulesoft application. This is generally not known for external systems.
    */
    'buildDate'?: Date;
    /**
    * An optional status message describing the service health.
    */
    'statusMessage'?: string;
    /**
    * The service health of all systems the application connects to.  This is only poplulated when the deep query parameter is passed in. 
    */
    'connectedServices'?: Array<ServiceHealth>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceName",
            "baseName": "serviceName",
            "type": "string"
        },
        {
            "name": "checkDate",
            "baseName": "checkDate",
            "type": "Date"
        },
        {
            "name": "isUp",
            "baseName": "isUp",
            "type": "boolean"
        },
        {
            "name": "serviceVersion",
            "baseName": "serviceVersion",
            "type": "string"
        },
        {
            "name": "buildDate",
            "baseName": "buildDate",
            "type": "Date"
        },
        {
            "name": "statusMessage",
            "baseName": "statusMessage",
            "type": "string"
        },
        {
            "name": "connectedServices",
            "baseName": "connectedServices",
            "type": "Array<ServiceHealth>"
        }    ];

    static getAttributeTypeMap() {
        return ServiceHealth.attributeTypeMap;
    }
}

